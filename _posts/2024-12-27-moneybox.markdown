---
layout: post
title: "vulnhub - moneybox"
date: 2024-09-28 00:00:00 +0200
image: moneybox.PNG
tags: [vulnhub, 'hacking', 'moneybox']
categories: vulnhub
---
vulnhub 중 moneybox의 풀이과정입니다.

***

# **1. IP 알아내기**

![]({{site.baseurl}}/images/moneybox/1_1.png)

현재 로그인 되어 있는 kali Linux는 10.0.2.4이다.
10.0.2.5로 ping을 보냈을 때 정상적으로 보내지지만,

![]({{site.baseurl}}/images/moneybox/1_2.png)

10.0.2.6으로는 가지 않는 모습을 확인할 수 있다.

***

# **2. 기초 정보 탐색**

10.0.2.5에 nikto와 nmap, dirbuster를 사용하여 정보를 알아내었다.

![]({{site.baseurl}}/images/moneybox/2_0.png)
![]({{site.baseurl}}/images/moneybox/2_1.png)

nmap 검색 결과 FTP, SSH, HTTP 3가지의 포트가 열린 것을 확인할 수 있었다.

![]({{site.baseurl}}/images/moneybox/2_2.png)

dirbuster결과 3가지의 경로가 나왔고, 그 중 Response를 받을 수 있는 blogs에 접속했다.

![]({{site.baseurl}}/images/moneybox/2_3.png)

/blogs로 익스텐션을 준 뒤 들어가면 Tom-hacker가 이야기를 한다.

> I Already Hacked This Box and Informed. 
But They didn't Do any Security configuration
If You Want Hint For Next Step......?

해석하면 이미 Tom이라는 해커가 이 Box를 해킹했는데,
보안조치를 하지 않았다는 것 같다.
다음 단계의 힌트도 주고 있다.

![]({{site.baseurl}}/images/moneybox/2_4_2.png)

F12를 눌러 개발자 도구를 확인해보니 hint를 알려주고 있다.
> the hint is the another secret directory is S3cr3t-T3xt

![]({{site.baseurl}}/images/moneybox/2_5.png)

알려준 경로로 들어간 뒤 개발자 도구를 또 다시 확인하니
> ..Secret Key 3xtr4ctd4t4

라는 문구를 알려주었다.

***

# **3. FTP 접속**

![]({{site.baseurl}}/images/moneybox/3_1.png)

FTP로 10.0.2.5로 접속이 가능한 지 이전에서 얻은 패스워드를 통해 확인했다(password : 3xtr4ctd4t4)
확인 결과 FTP로 접속이 가능했다.

![]({{site.baseurl}}/images/moneybox/3_2.png)

'ls' 명령어를 통해 볼 수 있는 파일이 있는 지 확인한 결과, 'trytofind'라는 파일이 존재했다.

![]({{site.baseurl}}/images/moneybox/3_2_1.png)

'trytofind'라는 파일을 'exiftool'로 확인했으나, 별 다른 건 없었다.

![]({{site.baseurl}}/images/moneybox/3_3.png)

'trytofind'의 사진은 고양이 사진이며 별 다른 건 없었다.

***

# **4. 스테가노그래피**

인터넷에 "이미지 숨김 내용 검색"이라고 검색하니 스테가노그래피가 나왔다.
요약하자면 이미지와 파일을 합성할 수 있다는 것.
참고한 블로그 : [🕵🏼스테가노그래피🕵🏼][steganography]

따라서 steghide를 통해 trytofind의 이미지에서 파일을 추출했다.

![]({{site.baseurl}}/images/moneybox/4_1.png)

'steghide'를 통해 'trytofind.jpg'를 분리한다.

![]({{site.baseurl}}/images/moneybox/4_2.png)

>Hello.... renu
I tell you something Important. Your password is too Week So Change Your Password
Don't Underestimate it.......

알아낸 정보로는 2가지이다.
1. 유저의 이름은 'renu'이다.
2. Password가 너무 취약하다.
-> 브루트포스를 통해 Password를 크랙하면 된다는 생각이 들었다.

사용한 Password txt파일 : [10-million-password-list-top-10000.txt][passwordcrack]


![]({{site.baseurl}}/images/moneybox/4_4.png)

PASS_FILE에 Password txt파일을 넣고 진행한다.

![]({{site.baseurl}}/images/moneybox/4_5.png)

브루트포스로 유저'renu'의 권한을 얻었다.
>id : renu
password : 987654321

***

# **5. SSH 로그인**


![]({{site.baseurl}}/images/moneybox/5_1.png)

알아낸 ID와 PW를 통해 SSH로그인을 시도한다.
>ssh renu@10.0.2.5
password : 987654321

'ls'명령어를 통해 'user1.txt'파일을 발견했다.
>cat user1.txt
Yes ... !
You Got it User1 Flag
-->us3r1{F14g:0ku74tbd3777y4}

![]({{site.baseurl}}/images/moneybox/5_2.png)

또한 lily의 폴더에 있는 user2의 flag도 알아냈다.


***

# **6. 루트 권한 상승**

![]({{site.baseurl}}/images/moneybox/5_3.png)

'sudo -l' 명령어로 어떤 명령어를 사용할 수 있는지 확인한다.
'(ALL : ALL) NOPASSWD: /usr/bin/perl' 사용 가능

![]({{site.baseurl}}/images/moneybox/5_5.png)

perl 인터프리터가 잘 작동하는 걸 확인한 후
perl 인터프리터를 사용해 root권한으로 bash쉘을 실행시켰다.
>sudo perl -e 'exec "/bin/bash"'

![]({{site.baseurl}}/images/moneybox/5_6.png)

user1.txt, user2.txt가 둘 다 txt파일이어서
txt파일을 'find'명령어를 이용해 찾아보았으며,
root.txt파일을 찾아냈다.

![]({{site.baseurl}}/images/moneybox/5_7.png)

root.txt를 'cat'명령어를 통해 열면 root Flag를 얻으며 끝난다.
>Root flag : r00t{H4ckth3p14n3t}

***

# **시행착오**

![]({{site.baseurl}}/images/moneybox/2_4_1.png)

Password : T0m-H4ck3r로 입력 후 로그인했으나 실패했다.

![]({{site.baseurl}}/images/moneybox/2_5_1.png)

Password : S3cr3t-T3xt, 3xtr4ctd4t4로 입력 후 로그인했으나 실패했다.

![]({{site.baseurl}}/images/moneybox/3_4_1.png)

trytofind.jpg를 try.txt로 변환하여 보았으나 실패했다.

![]({{site.baseurl}}/images/moneybox/4_3.png)

'msfconsole'을 통해 진행했으나 set USERPASS_FILE에 넣어 실패했다.

**참고한 사이트 : [Shocker][perl]**

[steganography]:https://1000sj.tistory.com/234
[passwordcrack]:https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt
[perl]:https://kw470.tistory.com/201
<!-- Jekyll also offers powerful support for code snippets:

{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://hudi.blog/mysql-no-order-by-no-sorting-guarantee/
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/ -->
